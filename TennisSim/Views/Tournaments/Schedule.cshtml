@model TournamentScheduleViewModel
@{
    var currentDay = Model.Schedule.FirstOrDefault();
    var isDataAvailable = Model.Schedule.Any();
}

<link rel="stylesheet" type="text/css" href="~/css/Schedule.css" />
<script type="text/javascript" src="~/js/schedule.js"></script>

<div class="tournament-schedule">
    <header>
        <h1>@Model.TournamentName</h1>
        <div class="date-selector">
            <form method="get" class="form-inline">
                <input type="hidden" name="id" value="@Model.TournamentId" />
                <select name="date" class="form-control" onchange="this.form.submit()">
                    @if (Model.AvailableDates != null)
                    {
                        @foreach (var date in Model.AvailableDates.OrderByDescending(d => d))
                        {
                            @if (date.Date == Model.SelectedDate.Date)
                            {
                                <option value="@date.ToString("yyyy-MM-dd")" selected>
                                    @date.ToString("d MMMM yyyy")
                                </option>
                            }
                            else
                            {
                                <option value="@date.ToString("yyyy-MM-dd")">
                                    @date.ToString("d MMMM yyyy")
                                </option>
                            }
                        }
                    }
                </select>
            </form>
        </div>
        @if (Model.CurrentDate.Date == Model.SelectedDate.Date && Model.HasUnplayedMatches)
        {
            <div class="day-status warning">
                <div class="status-icon">⚠️</div>
                <div class="status-message">
                    There are unplayed matches scheduled for today. Complete all matches to advance to the next day.
                </div>
            </div>
        }
        else if (Model.CurrentDate.Date == Model.SelectedDate.Date && !Model.HasUnplayedMatches)
        {
            <div class="day-status success">
                <div class="status-icon">✅</div>
                <div class="status-message">
                    All matches for today are complete. You can now advance to the next day.
                </div>
            </div>
        }
    </header>

    <main class="schedule-container">
        @if (!isDataAvailable)
        {
            <div class="notice">
                <p>Schedule not yet available for selected date</p>
            </div>
        }
        else
        {
            <nav class="days-nav">
                @foreach (var day in Model.Schedule)
                {
                    <button class="day-btn @(day == currentDay ? "active" : "")"
                            data-date="@day.Date.ToString("yyyy-MM-dd")">
                        <span class="day-name">@day.Date.ToString("ddd")</span>
                        <strong class="day-number">@day.Date.ToString("dd")</strong>
                        @{
                            var hasUnplayedMatches = day.ScheduledMatches.Any(m => 
                                m.Status != MatchStatus.Completed && 
                                m.Status != MatchStatus.Cancelled && 
                                m.Status != MatchStatus.Walkover);
                        }
                        @if (hasUnplayedMatches)
                        {
                            <span class="pending-indicator" title="Has unplayed matches">●</span>
                        }
                    </button>
                }
            </nav>

            @foreach (var day in Model.Schedule)
            {
                <section class="day-schedule @(day == currentDay ? "active" : "")"
                         id="schedule-@day.Date.ToString("yyyy-MM-dd")">
                    <div class="matches">
                        @foreach (var match in day.ScheduledMatches.OrderBy(m => m.StartTime).ThenBy(m => m.Court))
                        {
                            <article class="match @(match.Status == MatchStatus.Scheduled && Model.CurrentDate.Date == day.Date.Date ? "needs-simulation" : "")" 
                                     data-status="@match.Status.ToString().ToLower()" 
                                     data-match-id="@match.Id">
                                <div class="match-time">
                                    <time>@match.StartTime.ToString("HH:mm")</time>
                                    <small>Court @match.Court • @match.Round</small>
                                </div>

                                <div class="match-details">
                                    @if (match.DrawMatch?.Player1 != null && match.DrawMatch?.Player2 != null)
                                    {
                                        <div class="player @(match.DrawMatch.Player1SeedNumber.HasValue ? "seeded" : "")">
                                            <div class="player-info">
                                                @if (match.DrawMatch.Player1SeedNumber.HasValue)
                                                {
                                                    <span class="seed">[@match.DrawMatch.Player1SeedNumber]</span>
                                                }
                                                <strong>@match.DrawMatch.Player1.Name</strong>
                                                @{
                                                    var p1Rank = match.DrawMatch.Player1.Ranking;
                                                    var p2Rank = match.DrawMatch.Player2.Ranking;
                                                    
                                                    double p1Probability = 1 / (1 + Math.Exp((p1Rank - p2Rank) / 100.0));
                                                    double p1Odds = Math.Round(1 / p1Probability, 2);
                                                }
                                                <span class="inline-odds">
                                                    <span class="odds-value">@(Math.Round(p1Probability * 100, 1))%</span>
                                                    <span class="decimal-odds">(@p1Odds)</span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="player @(match.DrawMatch.Player2SeedNumber.HasValue ? "seeded" : "")">
                                            <div class="player-info">
                                                @if (match.DrawMatch.Player2SeedNumber.HasValue)
                                                {
                                                    <span class="seed">[@match.DrawMatch.Player2SeedNumber]</span>
                                                }
                                                <strong>@match.DrawMatch.Player2.Name</strong>
                                                @{
                                                    double p2Probability = 1 - p1Probability;
                                                    double p2Odds = Math.Round(1 / p2Probability, 2);
                                                }
                                                <span class="inline-odds">
                                                    <span class="odds-value">@(Math.Round(p2Probability * 100, 1))%</span>
                                                    <span class="decimal-odds">(@p2Odds)</span>
                                                </span>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="tbd">To Be Determined</div>
                                    }
                                </div>

                                <div class="match-status">
                                    @if (match.Status == MatchStatus.Completed && match.DrawMatch?.Match != null)
                                    {
                                        <div class="match-result">
                                            <span class="score">
                                                @{
                                                    var winner = match.DrawMatch.Winner;
                                                    var player1 = match.DrawMatch.Player1;
                                                    var player2 = match.DrawMatch.Player2;

                                                    var setScores = match.DrawMatch.Match.Score.Split(',');
                                                    var cleanScores = new List<string>();
                                                    foreach (var set in setScores)
                                                    {
                                                        var score = set.Split('[')[0].Trim();
                                                        cleanScores.Add(score);
                                                    }
                                                    var formattedScore = string.Join(" ", cleanScores);
                                                }
                                                <span class="@(winner.Id == player1.Id ? "winner" : "loser")">@player1.Name</span>
                                                <span class="@(winner.Id == player2.Id ? "winner" : "loser")">@player2.Name</span>
                                                <br />
                                                <strong>@formattedScore</strong>
                                            </span>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="status @match.Status.ToString().ToLower()">@match.Status</span>
                                    }
                                </div>

                                <div class="simulate-button">
                                    @if (Model.CurrentDate.Date == day.Date.Date &&
                                   match.Status != MatchStatus.Completed &&
                                   match.Status != MatchStatus.Cancelled &&
                                   match.Status != MatchStatus.Walkover)
                                    {
                                        <a href="@Url.Action("MatchDetails", "Match", new { drawMatchId = match.DrawMatchId })"
                                           class="btn btn-primary @(match.Status == MatchStatus.Scheduled ? "pulse" : "")">
                                            MatchDetails
                                        </a>

                                        <a href="@Url.Action("SimulateMatch", "Match", new { matchId = match.Id  })"
                                               class="btn btn-success">
                                            Simulate Match
                                        </a>
                                    }
                                </div>
                            </article>
                        }
                    </div>
                </section>
            }
        }
    </main>
</div>